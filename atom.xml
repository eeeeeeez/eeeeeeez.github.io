<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ez&#39;s Blog</title>
  
  <subtitle>I&#39;m a potato</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://eztotheworld.com/"/>
  <updated>2018-03-06T05:19:17.260Z</updated>
  <id>http://eztotheworld.com/</id>
  
  <author>
    <name>ez</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaLearning04-Fundamentals</title>
    <link href="http://eztotheworld.com/2018/03/06/JavaLearning04-Fundamentals/"/>
    <id>http://eztotheworld.com/2018/03/06/JavaLearning04-Fundamentals/</id>
    <published>2018-03-06T05:17:59.000Z</published>
    <updated>2018-03-06T05:19:17.260Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Whitespace"><a href="#Whitespace" class="headerlink" title="Whitespace"></a>Whitespace</h2><ul><li>It’s one or more characters(such as a <em>space</em>, <em>tab</em>, <em>enter</em>, or <em>return</em>) that do not produce a visible mark or text. </li><li>It’s often used to make code visually presentable.</li><li>Java will ignore whitespace in code, but using whitespace correctly will make code easier to read and understand.</li></ul><p>Wrong format:</p><pre><code>public class WhiteSpace {    public static void main(String[] args) {    boolean isFormatted = false;System.out.println(isFormatted);    }}</code></pre><p>Correct format (after whitespace):</p><pre><code>public class WhiteSpace {    public static void main(String[] args) {    boolean isFormatted = false;    System.out.println(isFormatted);    }}</code></pre><h2 id="Comments"><a href="#Comments" class="headerlink" title="Comments"></a>Comments</h2><ol><li><p>Single line comments begin with two forward slashes:</p><pre><code>// This is a single line comment.</code></pre></li><li><p>Multi-line comments are longer and can span multiple lines. They begin with <code>/*</code> and end with <code>*/</code></p><pre><code>/*Hello,World!*/</code></pre></li></ol><h2 id="Math"><a href="#Math" class="headerlink" title="Math: +, -, *, /"></a>Math: +, -, *, /</h2><ul><li><p>Add, subtract, multiply, and divide.</p><pre><code>int sum = 11 + 28;int difference = 9 - 27;int product = 2 * 7;int quotient = 4 / 4;</code></pre></li><li>(DON’T FORGET THE SEMICOLONS)</li></ul><h2 id="Math-1"><a href="#Math-1" class="headerlink" title="Math: %"></a>Math: %</h2><ul><li>The modulo operator - represented in Java by the <code>%</code> symbol.</li><li>It returns the remainder of dividing two numbers.</li><li>Examples: <code>15 % 6</code> will return the value of <code>3</code>, because the remainder left over after dividing 15 by 6. </li></ul><h2 id="Relational-Operators"><a href="#Relational-Operators" class="headerlink" title="Relational Operators:"></a>Relational Operators:</h2><ul><li>R.O.compare data types that have a defined ordering, like numbers(since numbers are either smaller or larger than other numbers).</li><li>It will always return a boolean value of <code>true</code> or <code>false</code>.</li><li>A few R.O.:<ol><li><code>&lt;</code> : less than</li><li><code>&lt;=</code> : less than or equal to </li><li><code>&gt;</code> : greater than</li><li><code>&gt;=</code> : greater than or equal to </li></ol></li></ul><p>Eg.:</p><pre><code>public class RelationalOperators {    public static void main(String[] args) {    System.out.println(11 &lt;= 28);    }}//Output:    true</code></pre><h2 id="Equality-Operators"><a href="#Equality-Operators" class="headerlink" title="Equality Operators"></a>Equality Operators</h2><ul><li>In Java, <em>equality operators</em> are used to test equality.</li><li>The E.O.are:<ol><li><code>==</code> : equal to </li><li><code>!=</code> : not equal to </li></ol></li><li><p>E.O. do not require that operands share the same ordering, which means you can test equality across <code>boolean</code> with <code>char</code>, or <code>boolean</code> with <code>int</code>. You test cross whatever data types.</p><pre><code>char myChar = &apos;A&apos;;int myInt = -2;System.out.println(myChar == myInt);</code></pre></li></ul><p>The code above will return <code>false</code>.</p><p>Reference:</p><p><a href="https://www.codecademy.com/learn/learn-java" target="_blank" rel="noopener">Codecademy</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Whitespace&quot;&gt;&lt;a href=&quot;#Whitespace&quot; class=&quot;headerlink&quot; title=&quot;Whitespace&quot;&gt;&lt;/a&gt;Whitespace&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;It’s one or more characters(such
      
    
    </summary>
    
    
      <category term="Java" scheme="http://eztotheworld.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JavaLearning03-DataTypes</title>
    <link href="http://eztotheworld.com/2018/03/05/JavaLearning03-DataTypes/"/>
    <id>http://eztotheworld.com/2018/03/05/JavaLearning03-DataTypes/</id>
    <published>2018-03-06T04:48:06.000Z</published>
    <updated>2018-03-06T05:19:08.902Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Int"><a href="#Int" class="headerlink" title="Int"></a><code>Int</code></h2><ul><li>Short for integer.</li><li>All positive and negative numbers, including zero.</li><li>The <code>int</code> data type only allows values between -2, 147, 483, 648 and 2, 147, 483, 647.</li></ul><h2 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a><code>Boolean</code></h2><ul><li><code>boolean</code> data type can only be store either <code>true</code> or <code>false</code></li></ul><h2 id="Char"><a href="#Char" class="headerlink" title="Char"></a><code>Char</code></h2><ul><li>Short for character and can represent a single character.</li><li>Used to represent single characters, includes the keys on keyboard that used to produce text.</li><li><strong>Must</strong> be enclosed in single quotes.</li></ul><p><img src="https://image.ibb.co/iaO47n/delect_Later.jpg" alt="CharExample"></p><h2 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h2><p>In Java, one of its important feature is the ability to store values using <em>variables</em>.<br> &emsp; &emsp; 1. A <em>variable</em> stores a value.<br> &emsp; &emsp; 2. All variables must have a specified data type in Java.</p><p>Eg.   </p><pre><code>int myVariable = 7;</code></pre><ul><li>The variable <code>myVariable</code> now stores the value <code>7</code> as an <code>int</code> type.</li><li>DON’T FORGET THE SEMICOLON!</li></ul><p>More eg.</p><pre><code>int myNumber = 42;boolean myBoolean = false;char vaingloryFun = &apos;Y&apos;;</code></pre><p>Reference:</p><p><a href="https://www.codecademy.com/learn/learn-java" target="_blank" rel="noopener">Codecademy</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Int&quot;&gt;&lt;a href=&quot;#Int&quot; class=&quot;headerlink&quot; title=&quot;Int&quot;&gt;&lt;/a&gt;&lt;code&gt;Int&lt;/code&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Short for integer.&lt;/li&gt;
&lt;li&gt;All positive and ne
      
    
    </summary>
    
    
      <category term="Java" scheme="http://eztotheworld.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JavaLearning02-Fundamentals</title>
    <link href="http://eztotheworld.com/2018/03/05/JavaLearning02-Fundamentals/"/>
    <id>http://eztotheworld.com/2018/03/05/JavaLearning02-Fundamentals/</id>
    <published>2018-03-06T04:11:18.000Z</published>
    <updated>2018-03-06T04:11:46.197Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Escape-Characters"><a href="#Escape-Characters" class="headerlink" title="Escape Characters"></a>Escape Characters</h2><p>(This top was not supposed to the first section but since I think I’ll forget it in the future so I’ll put it on the top.)</p><p><code>/n</code> -&gt; <em>new line</em> (same as <code>VbCrlf</code> in vb)<br><code>/t</code> -&gt; <em>horizontal tab</em> (same as <code>vbTab</code> in vb)<br><code>\\</code> -&gt; <em>backslash</em> - prints a backslash character<br><code>\&quot;</code> -&gt; double quote - prints a double quote</p><pre><code>//Examples:    System.out.println(&quot;\\HELLO\nHOW\tARE \&quot;YOU\&quot;?\\\\&quot;);//Output:    \hello    how        are &quot;you&quot;?\\</code></pre><h2 id="Semicolon"><a href="#Semicolon" class="headerlink" title="Semicolon"></a>Semicolon</h2><ul><li><strong>All commands in java end with a semicolon.</strong></li></ul><h2 id="Packages"><a href="#Packages" class="headerlink" title="Packages"></a>Packages</h2><ul><li>Java has several predefined classes(not user defined), and they are grouped together into <em>packages</em>.</li><li>Packages <strong>must</strong> be imported before we can use them. <ul><li><code>import javax.swing.JOptionPane;</code></li></ul></li><li><code>JOptionPane</code> is basically a dialog box</li></ul><h2 id="Display-in-a-Dialog-Box"><a href="#Display-in-a-Dialog-Box" class="headerlink" title="Display in a Dialog Box"></a>Display in a Dialog Box</h2><pre><code>import javax.swing.JOptionPane;   public class Test {    /**      * @param args the command line arguments      */    public static void main(String[] args) {        // TODO code application logic here        JOptionPane.showMessageDialog(null,&quot;Hello world.&quot;);} }</code></pre><center><br><img src="https://image.ibb.co/dCwStS/hello_World1_Java.png" alt="HelloWorldFirstVersion"><br></center><ul><li>JOptionPane is the <em>class</em>, showMessageDialog is the <em>method</em>. </li><li>null, means the dialog box will appear in the centre of the screen.</li><li><p>null and “Hello World.” are two pieces of information that passes to the method. They are known as <em>parameters</em>. Both of the parameters are necessary otherwise the program won’t work.</p></li><li><p>There are several types of message boxes we can customize:</p><ul><li><code>PLAIN_MESSAGE</code><center><br><img src="https://image.ibb.co/mZZNtS/Plain_Message_Dialoge_Box.png" alt="PlainMessageVersion"><br></center></li><li><code>ERROE_MESSAGE</code><center><br><img src="https://image.ibb.co/ku6ctS/error_Message_Output.png" alt="ErrorMessageVersion"><br></center></li><li><code>INFORMATION_MESSAGE</code><center><br><img src="https://image.ibb.co/dmdFDS/Information_Message_Dialoge_Box.png" alt="InformationMessageVersion"><br></center></li><li><code>WARNING_MESSAGE</code><center><br><img src="https://image.ibb.co/cAqZ7n/Warning_Message_Dialoge_Box.png" alt="WarningMessageVersion"><br></center></li></ul></li><li><p>We can also give the box a title.</p></li></ul><h2 id="To-Terminate-a-Program"><a href="#To-Terminate-a-Program" class="headerlink" title="To Terminate a Program"></a>To Terminate a Program</h2><p><code>System.exit(0)</code><br>It’s not always necessary but it won’t hurt to practice to include it.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://docs.google.com/presentation/d/1JjYc4cVVryrwm58RZ3vldYBGYUOb9mTFDM8K1-HxcFA/edit#slide=id.p21" target="_blank" rel="noopener">ICS3U</a>, Mr.Cutten</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Escape-Characters&quot;&gt;&lt;a href=&quot;#Escape-Characters&quot; class=&quot;headerlink&quot; title=&quot;Escape Characters&quot;&gt;&lt;/a&gt;Escape Characters&lt;/h2&gt;&lt;p&gt;(This top 
      
    
    </summary>
    
    
      <category term="Java" scheme="http://eztotheworld.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JavaLeaning01 - Fundamentals</title>
    <link href="http://eztotheworld.com/2018/03/04/JavaLeaning01-Fundamentals/"/>
    <id>http://eztotheworld.com/2018/03/04/JavaLeaning01-Fundamentals/</id>
    <published>2018-03-05T00:51:04.000Z</published>
    <updated>2018-03-05T14:08:47.894Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Classes"><a href="#Classes" class="headerlink" title="Classes"></a>Classes</h2><ul><li>Every program in java <strong>must</strong> have one class defined by the programmer. </li><li><p>Name of each file <strong>must</strong> be the same as the name of the class followed by <strong>.java</strong> </p><pre><code>public class SampleClassName {    ...}//End SampleClassName//File name -&gt; SampleClassName.java</code></pre></li></ul><h2 id="Main-Method"><a href="#Main-Method" class="headerlink" title="Main Method"></a>Main Method</h2><ul><li>Main method must be included in every java application.</li><li>Java applications begin to execute here.</li><li><p>Main method may invoke other methods.</p><pre><code>public static void main (String args[]) {    ...}//end main</code></pre></li></ul><h2 id="Indenting"><a href="#Indenting" class="headerlink" title="Indenting"></a>Indenting</h2><ul><li><p>Indent each line of code between two matching curly brackets by one extra level.     </p><pre><code>public class Indenting{    public static void main (String args[]) {        if (1 &lt; 2) {        }    }}</code></pre></li><li><p>Two styles to keep truck on indentation: <a href="https://oi.men.ci/code-style-oi/" target="_blank" rel="noopener">Menci’s code style</a></p><pre><code>// First one, close curly bracket without linefeed.The left side of left brace MUST have and ONLY have one space.if (condition) {} elso {}//Second one, linefeed everytime when have a curly bracket.The left side of left brace MUST have the same indent as the last code block.if (condition) {}else (condition){}</code></pre></li></ul><h2 id="Displaying-Information"><a href="#Displaying-Information" class="headerlink" title="Displaying Information"></a>Displaying Information</h2><pre><code>System.out.println(&quot;Hello World.&quot;);</code></pre><p>&emsp; &emsp; &emsp; System -&gt; class</p><p>&emsp; &emsp; &emsp; println -&gt; method</p><p>&emsp; &emsp; &emsp; “Hello World” -&gt; String</p><ul><li><p>Word to display must be in quotes. (unless stored in a variable.)</p></li><li><p>To print a blank line:</p><pre><code>System.out.println();</code></pre></li><li><p>To print without moving to the next line:</p><pre><code>System.out.print();</code></pre></li></ul><h2 id="Combining-Output"><a href="#Combining-Output" class="headerlink" title="Combining Output"></a>Combining Output</h2><ul><li>‘+’ symbol performs concatenation.</li><li>println will only print <em>one</em> String, therefore we must concatenate.</li><li><p>Concatenation does not add spaces.</p><pre><code>System.out.println(&quot;I got&quot; + 75/75 + &quot;on CCC.&quot;)</code></pre></li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://docs.google.com/presentation/d/1y6Zj5zk_pYzo5kwVFhHbfdWORu7htP29Ljzc2WIAQKk/edit#slide=id.p29" target="_blank" rel="noopener">ICS3U</a>, Mr.Cutten</p><p><a href="https://courses.cs.washington.edu/courses/cse143/16au/style/curly-brackets-and-indentation.html" target="_blank" rel="noopener">Curly brackets and indentation</a>, University of Washington, Computer Science &amp; Engineering </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Classes&quot;&gt;&lt;a href=&quot;#Classes&quot; class=&quot;headerlink&quot; title=&quot;Classes&quot;&gt;&lt;/a&gt;Classes&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Every program in java &lt;strong&gt;must&lt;/strong&gt; 
      
    
    </summary>
    
    
      <category term="Java" scheme="http://eztotheworld.com/tags/Java/"/>
    
  </entry>
  
</feed>
